@using ConsoleCafe.WebSite.Models
@using ConsoleCafe.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService
<!-- Injected Navigation Manager so we could navigate between pages or components -Ravi. -->
@inject NavigationManager NavManager

<!-- Add drop down menu for game type filtering. No functionality yet!-->
<div>
    <div class="row">
        <div class="col">
            <label class="filter-label">Select a game type to filter by type: </label>
            <!--<select asp-for="ProductType" asp-items="Html.GetEnumSelectList<Models.ProductTypeEnum>()"> -->
            <select id="GameType" name="GameType">
                <!-- Hard code options for now (can't get enum ProductType linked properly) -->
                <option value="">Select game type</option>
                <option value="1">FPS</option>
                <option value="2">Racing</option>
                <option value="3">Sports</option>
            </select>
            
            <button @onclick="(e => EnableFilterType())" class="btn-filter">Filter</button>
            <button @onclick="(e => ClearFilterType())" class="btn-filter">Clear</button>
            
        </div>
    </div>
</div>

<!-- Collect input of game name from user to search -->
<div>
    <div class="row">
        <div class="col">
            <label class="filter-label">Enter a game name to search: </label>
            <input type="text" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" />
            <button @onclick="(e => EnableFilterData())" class="btn-filter">Filter</button>
            <button @onclick="(e => ClearFilterData())" class="btn-filter">Clear</button>
        </div>
    </div>

</div>

<!-- Container to display filtered (or not) games -->
<div class="container-fluid">
    @{
        var productList = ProductService.GetProducts();

        /*
        Allows searching by name of game 
        if filter enabled, filter for string entered
        if not display all tiles
        */

        if (FilterType)
        {
            /*productList = productList.Where(m => m.ProductType.Equals(typeFilter));*/
        }

        if (FilterData)
        {
            productList = productList.Where(m => m.Name.ToLower().Contains(FilterDataString.ToLower()));

        }

        if (productList.Any())
        {
            <hr />
            <div class="row">
                <div class="card-columns">
                    @foreach (var product in productList)
                    {
                        <div class="card">
                            <div class="card-img" style="background-image: url('@product.Image');">
                            </div>
                            <div class="card-body">
                                <!-- Updated cards to be displayed by "Name" instead of "Title". -->
                                <h5 class="card-title">@product.Name</h5>
                            </div>
                            <div class="card-footer">
                                <!-- Updated button name to "View More". -->
                                <small class="text-muted">
                                    <!-- Using navigation updated the onclick funtionality to respective destination  -->
                                    <button @onclick="(e => MovetoView(product.Id))" id="ViewMoreButton_@product.Id" class="btn btn-primary">View More</button>
                                </small>
                                <!-- Added right aligned download button. Still directs to product info.  -->
                                <small class="text-muted float-right">
                                    <button @onclick="(e => SelectProduct(product.Id))"
                                        data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                                        Download
                                    </button>
                                </small>
                            </div>
                        </div>
                    }

                </div>
            </div>
        }
    }
</div>

<!--Page responsive popup code that displays that a button was clicked  -->
@if(selectedProduct != null)
{
 <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="productTitle">Page Responsive</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="card">
           <h3>You have clicked on the tile buttons.</h3>
          </div>
        </div>
      </div>
    </div>
</div>
}
<!--Commented the part of code unnecessary for this sprint  -->
@*
@if(selectedProduct == null)
{
  <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="card">
            <div class="card-img" style="background-image: url('@selectedProduct.Image');">
            </div>
            <div class="card-body">
                <p class="card-text">@selectedProduct.Description</p>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          @if(voteCount == 0)
          {
            <span>Be the first to vote!</span>
          }
          else
          {
            <span>@voteCount @voteLabel</span>
          }
          @for(int i=1; i<6; i++)
          {
            var currentStar = i;
            if(i<=currentRating)
            {
              <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
            }
            else
            {
              <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
            }
          }
        </div>
      </div>
    </div>
  </div>
}
*@

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code 
{
    ProductModel selectedProduct;
    string selectedProductId;

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if(selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }
    // Defining a function and setting the path for the nav manager. -Ravi.
    void MovetoView(string id)
    {
        NavManager.NavigateTo("../Product/View/" + id, true);
    }

    // Methods for needed for filtering

    string FilterDataString = "";
    bool FilterData = false;


    void UpdateFilterText(string text)
    {
        // set string holding name to text input from user
        FilterDataString = text;
    }

    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = true;
    }

    void ClearFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = false;

        FilterDataString = "";
    }

    bool FilterType = false;

    void EnableFilterType()
    {
        // If the Filter is enabled, set the filter flag
        FilterType = true;
    }

    void ClearFilterType()
    {
        // If the Filter is enabled, set the filter flag
        FilterType = false;
        FilterDataString = "";
    }


}

