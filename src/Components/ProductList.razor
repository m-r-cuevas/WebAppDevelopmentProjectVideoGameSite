@using ConsoleCafe.WebSite.Models
@using ConsoleCafe.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService
<!-- Injected Navigation Manager so we could navigate between pages or components -->
@inject NavigationManager NavManager

<!--Filter by Product Type from a dropdown-->
<div>
    <div class="row">
        <div class="col">
            <select @onchange="(e) => UpdateFilterType(e.Value.ToString())" id="GameType">
        <option selected>Filter</option>
        @foreach (ProductTypeEnum category in Enum.GetValues(typeof(ProductTypeEnum)))
        {
            <option value=@category>@ProductTypeEnumExtensions.DisplayName(category)</option>
        }
    </select>

            <!-- Collect input of game name from user to search -->

            <input id = "filter-input" type="text" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" />
            <button @onclick="(e => EnableFilterData())" class="btn-filter">Search</button>
            <button @onclick="(e => ClearFilterData())" class="btn-filter">Clear</button>
        </div>
    </div>

</div>

<!-- Container to display filtered (or not) games -->
<div class="container-fluid">
    @{
        var productList = ProductService.GetProducts();

        //flag to check if any products were rendered
        var productPresent = 0;

 
        /*
        Allows searching by name of game 
        if filter enabled, filter for string entered
        if not display all tiles
        */

        if (FilterData)
        {
            productList = productList.Where(m => m.Name.ToLower().Contains(FilterDataString.ToLower()));
        }

        if (!String.IsNullOrEmpty(FilterDataType))
        {
            if (!FilterDataType.Equals("Filter"))
            {
                productList = productList.Where(m => m.ProductType.ToLower().Contains(FilterDataType.ToLower()));
            }

        }

        if (productList.Any())
        {
            productPresent = 1;
            <hr />
            <div class="row">
                <div class="card-columns">
                    @foreach (var product in productList)
                    {
                        <div class="card">
                            <div class="card-img" style="background-image: url('@product.Image');">
                            </div>
                            <div class="card-body">
                                <!-- Updated cards to be displayed by "Name" instead of "Title". -->
                                <h5 class="card-title">@product.Name</h5>
                            </div>
                            <div class="card-footer">
                                <!-- Updated button name to "View More". -->
                                <small class="text-muted">
                                    <!-- Using navigation updated the onclick funtionality to respective destination  -->
                                    <button @onclick="(e => MovetoView(product.Id))" id="ViewMoreButton_@product.Id" class="btn btn-primary">View More</button>
                                </small>
                                <!-- Added right aligned download button. Should direct to download  -->
                                <small class="text-muted float-right">
                                    <button @onclick="(e => MovetoDownload(product.Id))" id="DownloadButton_@product.Id" class="btn btn-primary">Download</button>
                                </small>
                            </div>
                        </div>
                    }

                </div>
            </div>
        }

        //To display "items not found" message in response to an invalid search
        if (productPresent == 0)
        {
            <br />
            <br />
            <h2>404 Error</h2>
            <h4>
                The search results are on vacation. They left no forwarding address. Maybe they're sipping margaritas on a sunny beach. Try again with something we can find!!
            </h4>
        }
    }
</div>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code 
{
    ProductModel selectedProduct;
    string selectedProductId;
    string FilterDataString = "";
    bool FilterData = false;
    string FilterDataType;
    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;
    
    // Defining a function and setting the path for the nav manager. (direct to View page)
    void MovetoView(string id)
    {
        NavManager.NavigateTo("../Product/View/" + id, true);
    }

    // Defining a function and setting the path for the nav manager. (Direct to Download page)
    void MovetoDownload(string id)
    {
        NavManager.NavigateTo("../Download/" + id, true);
    }

    void UpdateFilterText(string text)
    {
        // set string holding name to text input from user
        FilterDataString = text;
    }

    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = true;
    }

    void ClearFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = false;
        FilterDataString = "";
    }

    //Changes category filter string to user selected option
    void UpdateFilterType(string category)
    {
        FilterDataType = category;
    }

}